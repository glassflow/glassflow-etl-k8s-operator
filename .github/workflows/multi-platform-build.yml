name: Multi-Platform Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io/glassflow
  IMAGE_NAME: glassflow-etl-k8s-operator

jobs:
  build-multi-platform:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - linux/ppc64le
          - linux/s390x
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Generate platform tag
        id: platform-tag
        run: |
          # Convert platform to valid Docker tag
          case "${{ matrix.platform }}" in
            "linux/amd64") echo "tag=amd64-test" >> $GITHUB_OUTPUT ;;
            "linux/arm64") echo "tag=arm64-test" >> $GITHUB_OUTPUT ;;
            "linux/ppc64le") echo "tag=ppc64le-test" >> $GITHUB_OUTPUT ;;
            "linux/s390x") echo "tag=s390x-test" >> $GITHUB_OUTPUT ;;
            *) echo "tag=unknown-test" >> $GITHUB_OUTPUT ;;
          esac
          echo "✅ Generated tag: ${{ steps.platform-tag.outputs.tag }}"

      - name: Build and push single platform
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.platform-tag.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Tag with main
        if: github.ref == 'refs/heads/main'
        run: |
          # Tag with main for main branch
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.platform-tag.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          
          # Push main tag
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main

      - name: Test binary compatibility
        run: |
          # Pull the built image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.platform-tag.outputs.tag }}
          
          # Test that the binary runs
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.platform-tag.outputs.tag }} --help || true
          
          echo "✅ Platform ${{ matrix.platform }} build and test completed"

  test-cross-compilation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Test cross-compilation for all platforms
        run: |
          echo "Testing cross-compilation for different platforms..."
          
          # Test AMD64
          GOOS=linux GOARCH=amd64 go build -o bin/manager-amd64 cmd/main.go
          echo "✅ AMD64 build successful"
          
          # Test ARM64
          GOOS=linux GOARCH=arm64 go build -o bin/manager-arm64 cmd/main.go
          echo "✅ ARM64 build successful"
          
          # Test PPC64LE
          GOOS=linux GOARCH=ppc64le go build -o bin/manager-ppc64le cmd/main.go
          echo "✅ PPC64LE build successful"
          
          # Test S390X
          GOOS=linux GOARCH=s390x go build -o bin/manager-s390x cmd/main.go
          echo "✅ S390X build successful"
          
          # Clean up
          rm -f bin/manager-*

  validate-manifests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Validate kustomize manifests
        run: |
          echo "Validating kustomize manifests..."
          kustomize build config/default > /dev/null
          echo "✅ Kustomize manifests are valid"

      - name: Validate CRDs
        run: |
          echo "Validating CRDs..."
          kustomize build config/crd > /dev/null
          echo "✅ CRDs are valid"

  cleanup:
    runs-on: ubuntu-latest
    needs: [build-multi-platform, test-cross-compilation, validate-manifests]
    if: always()
    steps:
      - name: Cleanup test images
        run: |
          echo "Cleaning up test images..."
          # This would clean up test images if needed
          echo "✅ Cleanup completed"
