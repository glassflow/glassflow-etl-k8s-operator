name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io/glassflow
  IMAGE_NAME: glassflow-etl-k8s-operator

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Install golangci-lint
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.63.4

      - name: Run golangci-lint
        run: |
          golangci-lint run --timeout=5m

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Start NATS with Jetstream
        run: docker run -d -p 4222:4222 -p 8222:8222 nats:latest -js -m 8222

      - name: Wait for NATS to be ready
        run: |
          while ! curl -fs localhost:8222/varz > /dev/null
            do sleep 1
          done

      - name: Run unit tests
        run: |
          go mod tidy
          make test

  e2e-test:
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.ref == 'refs/heads/main' || github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Install kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/

      - name: Create kind cluster
        run: kind create cluster

      - name: Run e2e tests
        run: |
          go mod tidy
          make test-e2e

  build:
    runs-on: ubuntu-latest
    needs: [lint, test, e2e-test]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0
          buildkitd-flags: --debug

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=main,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  security-scan:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      packages: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'CI/CD Security Scan'

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Run Trivy secret scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '0'
          vuln-type: 'secret'

      - name: Run Trivy misconfiguration scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'table'
          exit-code: '0'
          vuln-type: 'config'

      - name: Run Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-fs-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload filesystem scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-fs-results.sarif'
          category: 'Dependency Scan'

      - name: Run Trivy filesystem scan (table format)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'table'
          exit-code: '0'
          severity: 'CRITICAL,HIGH,MEDIUM'

  validate-manifests:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/

      - name: Validate kustomize manifests
        run: |
          echo "Validating kustomize manifests..."
          kustomize build config/default > /dev/null
          echo "✅ Kustomize manifests are valid"

      - name: Validate CRDs
        run: |
          echo "Validating CRDs..."
          kustomize build config/crd > /dev/null
          echo "✅ CRDs are valid"

      - name: Generate manifests
        run: |
          echo "Generating manifests..."
          make manifests
          echo "✅ Manifests generated successfully"

  prepare-deployment:
    runs-on: ubuntu-latest
    needs: [build, security-scan, validate-manifests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Build installer
        run: |
          echo "Building installer..."
          make build-installer IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          echo "✅ Installer built successfully"

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: installer
          path: dist/install.yaml
          retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [build, security-scan, validate-manifests]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD pipeline failed!"
          echo "Check the workflow run for details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          
      - name: Notify on success
        if: success()
        run: |
          echo "✅ CI/CD pipeline completed successfully!"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
