name: Calculate Version

on:
  workflow_call:
    inputs:
      version_file:
        description: 'Version file to read'
        required: true
        type: string
        default: 'VERSION'
      version_type:
        description: 'Version bump type (patch, minor, major)'
        required: true
        type: string
        default: 'patch'
    outputs:
      current_version:
        description: 'The current version'
        value: ${{ jobs.calculate.outputs.current_version }}
      new_version:
        description: 'The calculated new version'
        value: ${{ jobs.calculate.outputs.new_version }}

jobs:
  calculate:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.calculate.outputs.new_version }}
      current_version: ${{ steps.read-version.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read version file
        id: read-version
        run: |
          if [ -f "${{ inputs.version_file }}" ]; then
            VERSION=$(cat ${{ inputs.version_file }} | tr -d ' \t\n\r')
          else
            VERSION="0.0.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version file: ${{ inputs.version_file }}"
          echo "Version: $VERSION"
      - name: Calculate new version
        id: calculate
        run: |
          CURRENT_VERSION="${{ steps.read-version.outputs.version }}"
          VERSION_TYPE="${{ inputs.version_type }}"
          
          echo "Current version: $CURRENT_VERSION"
          echo "Version bump type: $VERSION_TYPE"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          echo "Parsed version - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
          
          # Calculate new version based on input
          case "$VERSION_TYPE" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              echo "Major version bump: $MAJOR → $NEW_MAJOR"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              echo "Minor version bump: $MINOR → $NEW_MINOR"
              ;;
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              echo "Patch version bump: $PATCH → $NEW_PATCH"
              ;;
            *)
              echo "❌ Invalid version type: $VERSION_TYPE"
              exit 1
              ;;
          esac
          
          echo "✅ New version calculated: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Validate the new version
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Invalid version format: $NEW_VERSION"
            exit 1
          fi
