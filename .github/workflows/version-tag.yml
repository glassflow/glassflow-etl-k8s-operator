name: Version Tag Release

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to release (e.g., v1.0.0)'
        required: true
        type: string
        default: 'v1.0.0'
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
      push_images:
        description: 'Build and push Docker images'
        required: false
        default: true
        type: boolean

env:
  REGISTRY: ghcr.io/glassflow
  IMAGE_NAME: glassflow-etl-k8s-operator

jobs:
  version-release:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Setup Docker Buildx
        if: inputs.push_images == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:v0.12.0

      - name: Log in to Container Registry
        if: inputs.push_images == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Extract version from input
        id: version
        run: |
          # Extract version from input (remove 'v' prefix if present)
          VERSION=${{ github.event.inputs.version_tag }}
          VERSION=${VERSION#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "full_tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "✅ Version extracted: $VERSION"

      - name: Build and push versioned image
        if: inputs.push_images == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Security scan versioned image
        if: inputs.push_images == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          format: 'sarif'
          output: 'trivy-version-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security scan results
        if: always() && inputs.push_images == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-version-results.sarif'
          category: 'Version Release Security Scan'

      - name: Create GitHub release
        if: inputs.create_release == 'true'
        run: |
          echo "Creating GitHub release for version ${{ steps.version.outputs.version }}"
          
          # Create release
          gh release create "${{ steps.version.outputs.full_tag }}" \
            --title "Release ${{ steps.version.outputs.full_tag }}" \
            --notes "## 🚀 Version Release ${{ steps.version.outputs.full_tag }}

          ### 📦 Docker Images
          - **Version**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`
          - **Stable**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable\`

          ### 📋 Installation
          ```bash
          # Pull the specific version
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          
          # Or use stable (recommended for production)
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          ```

          ### 🔒 Security
          - Image has been security scanned with Trivy
          - Results uploaded to GitHub Security tab
          
          ### 📝 Changes
          - Version ${{ steps.version.outputs.version }} released
          - Stable tag updated to point to this version
          - Security scan completed" \
            --latest

      - name: Notify success
        run: |
          echo "✅ Version ${{ steps.version.outputs.version }} release workflow completed!"
          if [ "${{ inputs.push_images }}" = "true" ]; then
            echo "🐳 Docker images built and pushed:"
            echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
            echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable"
            echo "🔒 Security scan completed and uploaded"
          else
            echo "🐳 Docker images: Skipped"
          fi
          
          if [ "${{ inputs.create_release }}" = "true" ]; then
            echo "📝 GitHub release: Created"
          else
            echo "📝 GitHub release: Skipped"
          fi
