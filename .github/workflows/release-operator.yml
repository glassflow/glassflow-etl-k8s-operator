name: Release Operator

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
        REGISTRY: "ghcr.io/glassflow"
        IMAGE_NAME: "glassflow-etl-k8s-operator"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Read current version
        id: current-version
        run: |
          if [ -f "VERSION" ]; then
            CURRENT_VERSION=$(cat VERSION | tr -d ' \t\n\r')
          else
            CURRENT_VERSION="0.0.0"
          fi
          
          echo "Current version: $CURRENT_VERSION"
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new-version
        run: |
          CURRENT_VERSION="${{ steps.current-version.outputs.current-version }}"
          
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          echo "Parsed version - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
          
          # Calculate new version based on input
          VERSION_TYPE="${{ github.event.inputs.version_type }}"
          echo "Version bump type: $VERSION_TYPE"
          
          case "$VERSION_TYPE" in
            "major")
              NEW_MAJOR=$((MAJOR + 1))
              NEW_VERSION="$NEW_MAJOR.0.0"
              echo "Major version bump: $MAJOR ‚Üí $NEW_MAJOR"
              ;;
            "minor")
              NEW_MINOR=$((MINOR + 1))
              NEW_VERSION="$MAJOR.$NEW_MINOR.0"
              echo "Minor version bump: $MINOR ‚Üí $NEW_MINOR"
              ;;
            "patch")
              NEW_PATCH=$((PATCH + 1))
              NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
              echo "Patch version bump: $PATCH ‚Üí $NEW_PATCH"
              ;;
            *)
              echo "‚ùå Invalid version type: $VERSION_TYPE"
              exit 1
              ;;
          esac
          
          echo "‚úÖ New version calculated: $NEW_VERSION"
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Validate the new version
          if [[ ! "$NEW_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå Invalid version format: $NEW_VERSION"
            exit 1
          fi

      - name: Update VERSION file
        run: |
          echo "${{ steps.new-version.outputs.new-version }}" > VERSION
          echo "‚úÖ VERSION file updated to: ${{ steps.new-version.outputs.new-version }}"
          cat VERSION

      - name: Build Docker image
        run: |
          echo "üê≥ Building Docker image..."
          
          # Build the image with version tag
          make docker-buildx IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }}
          
          # Tag with latest and commit hash
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }}-${{ github.sha }}
          
          # Push all tags
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }}-${{ github.sha }}
          
          echo "‚úÖ Docker image built and tagged successfully"

      - name: Create GitHub release
        run: |
          # Create release
          gh release create "v${{ steps.new-version.outputs.new-version }}" \
            --title "Release v${{ steps.new-version.outputs.new-version }}" \
            --notes "## üöÄ Operator Release v${{ steps.new-version.outputs.new-version }}

          ### üì¶ Docker Images
          - **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }}\`
          - **Latest**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`
          - **Commit**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }}-${{ github.sha }}\`

          ### üìã Installation
          ```bash
          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }}
          
          # Or use latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```

          ### üìù Changes
          - Version bumped from \`${{ steps.current-version.outputs.current-version }}\` to \`${{ steps.new-version.outputs.new-version }}\`
          - Docker images built and pushed with three tags: version, latest, and commit hash
          - VERSION file updated" \
            --latest

      - name: Commit version changes
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add version changes
          git add VERSION
          
          # Commit the version bump
          git commit -m "chore: bump version to ${{ steps.new-version.outputs.new-version }}

          - Version: ${{ steps.current-version.outputs.current-version }} ‚Üí ${{ steps.new-version.outputs.new-version }}
          - VERSION file updated
          - Release: v${{ steps.new-version.outputs.new-version }}" || echo "No changes to commit"
          
          # Push the changes
          git push origin ${{ github.ref }}

      - name: Output summary
        run: |
          echo "üéâ Operator release completed successfully!"
          echo "üì¶ Version: ${{ steps.current-version.outputs.current-version }} ‚Üí ${{ steps.new-version.outputs.new-version }}"
          echo "üê≥ Docker images:"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }}"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.new-version.outputs.new-version }}-${{ github.sha }}"
          echo "üîó Release: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.new-version.outputs.new-version }}"
