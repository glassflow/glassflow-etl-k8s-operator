name: Release Operator

on:
  workflow_call:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: string
    outputs:
      new_version:
        description: 'New operator version'
        value: ${{ jobs.calculate-version.outputs.new_version }}

jobs:
  calculate-version:
    uses: ./.github/workflows/calculate-version.yml
    with:
      version_file: VERSION
      version_type: ${{ inputs.version_type }}

  release:
    needs: [calculate-version]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
        REGISTRY: "ghcr.io/glassflow"
        IMAGE_NAME: "glassflow-etl-k8s-operator"
        GH_TOKEN: ${{ github.token }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Update VERSION file
        run: |
          echo "${{ needs.calculate-version.outputs.new_version }}" > VERSION
          echo "‚úÖ VERSION file updated to: ${{ needs.calculate-version.outputs.new_version }}"
          cat VERSION

      - name: Build Docker image
        run: |
          echo "üê≥ Building Docker image..."
          
          # Build and push the image with version tag
          make docker-buildx IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }}
          
          # Tag with latest, stable, and commit hash
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }}-${{ github.sha }}
          
          # Push all tags
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }}-${{ github.sha }}
          
          echo "‚úÖ Docker image built and tagged successfully"

      - name: Security scan release image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }}
          format: 'sarif'
          output: 'trivy-release-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-release-results.sarif'
          category: 'Release Security Scan'

      - name: Create GitHub release
        run: |
          # Create release
          gh release create "v${{ needs.calculate-version.outputs.new_version }}" \
            --title "Release v${{ needs.calculate-version.outputs.new_version }}" \
            --notes "## üöÄ Operator Release v${{ needs.calculate-version.outputs.new_version }}

          ### üì¶ Docker Images
          - **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }}\`
          - **Latest**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`
          - **Stable**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable\`
          - **Commit**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }}-${{ github.sha }}\`

          ### üìã Installation
          ```bash
          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.calculate-version.outputs.new_version }}
          
          # Or use stable (recommended for production)
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          
          # Or use latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```

          ### üìù Changes
          - Version bumped to \`${{ needs.calculate-version.outputs.new_version }}\`
          - Docker images built and pushed with three tags: version, latest, and commit hash
          - VERSION file updated" \
            --latest

      - name: Commit version changes
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add version changes
          git add VERSION
          
          # Commit the version bump
          git commit -m "chore: bump version to ${{ needs.calculate-version.outputs.new_version }}

          - Version: ${{ needs.calculate-version.outputs.new_version }}
          - VERSION file updated
          - Release: v${{ needs.calculate-version.outputs.new_version }}" || echo "No changes to commit"
          
          # Push the changes
          git push origin ${{ github.ref }}
