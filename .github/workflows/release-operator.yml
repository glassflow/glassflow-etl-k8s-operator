name: Release Operator

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    env:
        REGISTRY: "ghcr.io/glassflow"
        IMAGE_NAME: "glassflow-etl-k8s-operator"
        GH_TOKEN: ${{ github.token }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "‚úÖ Version extracted from tag: $VERSION"
          else
            echo "‚ùå This workflow should only run on tag pushes"
            exit 1
          fi

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ github.token }}

      - name: Update VERSION file
        run: |
          echo "${{ steps.version.outputs.version }}" > VERSION
          echo "‚úÖ VERSION file updated to: ${{ steps.version.outputs.version }}"
          cat VERSION

      - name: Update operator version in Chart.yaml
        run: |
          echo "Updating operator version in Chart.yaml to ${{ steps.version.outputs.version }}"
          sed -i "s/^appVersion: .*/appVersion: ${{ steps.version.outputs.version }}/" charts/glassflow-operator/Chart.yaml
          cat charts/glassflow-operator/Chart.yaml

      - name: Build Docker image
        run: |
          echo "üê≥ Building Docker image..."
          
          # Build and push the image with version tag
          make docker-buildx IMG=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          
          # Tag with latest and commit hash
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-${{ github.sha }}
          
          # Push all tags
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-${{ github.sha }}
          
          echo "‚úÖ Docker image built and tagged successfully"

      - name: Create GitHub release
        run: |
          # Create release
          gh release create "v${{ steps.version.outputs.version }}" \
            --title "Release v${{ steps.version.outputs.version }}" \
            --notes "## üöÄ Operator Release v${{ steps.version.outputs.version }}

          ### üì¶ Docker Images
          - **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`
          - **Latest**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`
          - **Commit**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}-${{ github.sha }}\`

          ### üìã Installation
          ```bash
          # Pull the image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}
          
          # Or use latest
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ```

          ### üìù Changes
          - Version: \`${{ steps.version.outputs.version }}\`
          - Docker images built and pushed with three tags: version, latest, and commit hash
          - VERSION file updated" \
            --latest

      - name: Commit version changes
        run: |
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Add version changes
          git add VERSION
          git add charts/glassflow-operator/Chart.yaml
          
          # Commit the version bump
          git commit -m "chore: bump version to ${{ steps.version.outputs.version }}

          - Version: ${{ steps.version.outputs.version }}
          - VERSION file updated
          - Operator version in Chart.yaml updated
          - Release: v${{ steps.version.outputs.version }}" || echo "No changes to commit"
          
          # Push the changes
          git push origin ${{ github.ref }}
